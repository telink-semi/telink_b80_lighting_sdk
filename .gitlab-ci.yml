stages:
  - release_customize_sdk
  - scc
  - genLicense
  - checkLicense
  - cov
  - build_tc32
  - fossid
  - plainPW_check
  - misspellChecking

scc:
  stage: scc 
  tags:
    - LINUX

  script:
    - echo "Enter scc stage"
    - scc | tee scc.txt
    - bash /usr/bin/scc_calc.sh
    - echo "The End SCC result:"
    - cat scc.txt
  artifacts:
    paths:
    - scc.txt

genLicense:
  variables:
    CODE_COMPILE_ARCH: 'EAGLE_ANDES'
    COV_PF_CATALOG: 'BLE'
  stage: genLicense
  tags:
    - LINUX

  before_script:
  script:
    - date
    - generat_license_list
    - date
  artifacts:
    paths:
    - "license_list_gen.txt"
    - "no_license_list_gen.txt"
    - "mismatch_license_file_gen.txt"
  when: manual

checkLicense:
  variables:
    CODE_COMPILE_ARCH: 'EAGLE_ANDES'
    COV_PF_CATALOG: 'BLE'
  stage: checkLicense
  tags:
    - LINUX

  allow_failure: yes
  before_script:
  script:
    - date
    - check_license
    #- generat_license_list # For no license files
    - date

  artifacts:
    when: always
    paths:
    - "mismatch_license.txt"
    - "no_license*.txt"
    - "unknow_type_file.txt"
    
build_tc32:
  stage: build_tc32
  tags:
    - LINUX
    - TC32
  before_script:
  script:
    - which tc32-elf-gcc
    - date
    
    - $TC32_ECLIPSE_BUILD  -data ${CI_PIPELINE_ID}_WS1  -import project/tlsr_tc32/B80 -cleanBuild B80_Driver_Demo/LIGHT

    - date

  artifacts:
    paths:
    - "tl_zigbee_sdk/build/tlsr_tc32/sampleLight_8258/*.bin"
    - "tl_zigbee_sdk/build/tlsr_tc32/sampleLight_8258/*.lst"
    - "tl_zigbee_sdk/build/tlsr_tc32/sampleLight_8258/*.elf"
    - mm_pretty.csv

# The cov job definition
cov:
  variables:
    CODE_COMPILE_ARCH: 'TC32'
    COV_PF_CATALOG: 'BLE'
  stage: cov
  tags:
    - COV    
    - LINUX    
    - TC32
  before_script:
  script:
    - $COV_B COV_$CI_PROJECT_NAME $COV_B_TEMPLATE/$CODE_COMPILE_ARCH $TC32_ECLIPSE_BUILD  -data ${CI_PIPELINE_ID}_WS  -import project/tlsr_tc32/B80  -cleanBuild B80_Driver_Demo/UART_Demo    
    - $COV_B COV_$CI_PROJECT_NAME $COV_B_TEMPLATE/$CODE_COMPILE_ARCH $TC32_ECLIPSE_BUILD  -data ${CI_PIPELINE_ID}_WS  -import project/tlsr_tc32/B85  -cleanBuild B85_Driver_Demo/UART_Demo  
    - $COV_B COV_$CI_PROJECT_NAME $COV_B_TEMPLATE/$CODE_COMPILE_ARCH $TC32_ECLIPSE_BUILD  -data ${CI_PIPELINE_ID}_WS  -import project/tlsr_tc32/B87  -cleanBuild B87_Driver_Demo/UART_Demo  
    - $COV_B COV_$CI_PROJECT_NAME $COV_B_TEMPLATE/$CODE_COMPILE_ARCH $TC32_ECLIPSE_BUILD  -data ${CI_PIPELINE_ID}_WS  -import project/tlsr_tc32/B89  -cleanBuild B89_Driver_Demo/UART_Demo  
    - $COV_A COV_$CI_PROJECT_NAME 
    - cov_add_commit_steam_project_2_platform.sh
  when: manual

fossid:
  tags:
    - FOSSID
  stage: fossid
  tags:
    - LINUX

  script:
    - fossid_check.sh
  artifacts:
    paths:
    - fossid*.txt
  when: manual

plainPW_check:
  stage: plainPW_check 
  tags:
    - LINUX

  script:
    - echo "Enter Plain Password checking stage"
    - check_plain_weak_password | tee result.txt
    - ls -l result.txt
    - echo "Error List:"
    - cat result.txt
  artifacts:
    paths:
    - result.txt
  when: manual

misspellChecking:
  stage: misspellChecking
  tags:
    - LINUX
  script:
    - echo "--------------- Begin ------------------------"
    - misspell-check
    - echo "---------------- End -----------------------"
  artifacts:
    paths:
    - misspell_result.txt
    
    

.release_sdk_template: &release_sdk_template
  variables:
    PACK_NAME: "release_sdk_template"
  stage: release_customize_sdk	
  tags:
    # - windows_tc32_test
    - LINUX
  before_script:
    - echo "get ci release sdk shell"
    - >
      if [ ${#PRIVATE_TOKEN_SELF} != 0 ]; then
        clone_url="http://oauth2:${PRIVATE_TOKEN_SELF}@192.168.48.36/training_zone/ci_common_shell"
      elif [ ${#PRIVATE_TOKEN} != 0 ]; then
        clone_url="http://oauth2:${PRIVATE_TOKEN}@192.168.48.36/training_zone/ci_common_shell"
      else
        echo "have no find token."
        exit 1
      fi

    - git clone $clone_url
    - ls ci_common_shell
    - cp ci_common_shell/sdk_release_customize-2.0.sh ./
    - ls
  script:
    - chmod +x ./sdk_release_customize-2.0.sh
    - ./sdk_release_customize-2.0.sh ./release_sdk_config
  artifacts:
    name: "$PACK_NAME"
    expire_in: '3 yrs'
    paths:
    - chip/
    - common/
    - demo/
    - docs/
    - project/
    - README.md
  when: manual

copy_lib_S0:
  <<: *release_sdk_template
  variables:
    PACK_NAME: "telink_b80_lighting_sdk_S0_V1.3.2"
    
copy_lib_S1:
  <<: *release_sdk_template
  variables:
    PACK_NAME: "telink_b80_lighting_sdk_S1_V1.3.2"

copy_lib_S2:
  <<: *release_sdk_template
  variables:
    PACK_NAME: "telink_b80_lighting_sdk_S2_V1.3.2" 
    
